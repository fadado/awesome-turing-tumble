/*  Challenge #25: Regular Expression
 *
 *  Generate the required pattern (3R6B).
 */

#import "board.h"

digraph Challenge25 {
    /*
    ** attributes
    */
    graph [ GRAPH_STYLE newrank=true concentrate=true ]
    node  [ NODE_STYLE  ]
    edge  [ EDGE_STYLE  ]

    /*
    ** nodes
    */
    GAME_BOARD_NODES

#if ShowObjective
    objective [
        OBJECTIVE_STYLE
        label=$text(
            $line(Generate the required pattern (3R6B).))
    ]
#endif

    subgraph cluster_Register_A {
        color=grey
        A_bit_0 [ BIT_STYLE label=BITRIGHT ]
        A_bit_1 [ BIT_STYLE label=BITLEFT ]
        A_bit_2 [ BIT_STYLE label=BITRIGHT ]
    }
    subgraph cluster_Register_B {
        color=grey
        B_bit_0 [ BIT_STYLE label=BITRIGHT ]
        B_bit_1 [ BIT_STYLE label=BITLEFT ]
    }
    halt [ INTERCEPTOR_STYLE ]

    /*
    ** edges
    */
    start -> B_top

    B_top:s -> A_bit_0:n
    R_top:s -> B_bit_0:n

    A_bit_0:se -> A_bit_1:ne
    A_bit_0:sw -> B_bot:nw
    A_bit_1:se -> A_bit_2:ne
    A_bit_1:sw -> B_bot:nw
    A_bit_2:sw -> B_bot:nw
    A_bit_2:se -> R_bot

    B_bit_0:se -> B_bit_1:ne
    B_bit_0:sw -> R_bot:n
    B_bit_1:se -> halt
    B_bit_1:sw -> R_bot:n

    halt -> R_bot [style=invis ]

    GAME_BOARD_EDGES

    /*
    ** graph attributes
    */
#if ShowGraphLabel
    graph [
        label="Challenge #25: Regular Expression"
    ]
#endif
}

// vim:ai:ts=4:sw=4:et:fileencoding=utf-8:syntax=dot
